<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	
	<bean id="customAccessDenied" class="org.gosang.security.CustomAccessDeniedHandler"></bean>
	<!-- <bean id="customLoginSuccess" class="org.gosang.security.CustomLoginSuccessHandler"></bean> -->
	<!-- bcryptPasswordEncoder로 변경 --><!-- <bean id="customPasswordEncoder" class="org.gosang.security.CustomNoOpPasswordEncoder"></bean> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="customUserDetailsService" class="org.gosang.security.CustomUserDetailsService"></bean>
	
	<security:http>
		
		<!-- security:intercept-url: 접근을 제한하는 설정 / pattern: URI패턴 / access: 권한체크 -->
		<security:intercept-url pattern="/sample/all" access="permitAll" />
		
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
		
		<!-- 
			<security:access-denied-handler>는 error-page 속성과 ref 속성 중 하나만 사용 
			error-page 속성은 URI로 접근 ref 속성은 빈으로 등록하여 접근 
		-->
		<!-- <security:access-denied-handler error-page="/accessError" /> -->	<!-- /accessError URI로 접근 제한시보이는 화면 처리 -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<security:form-login login-page="/customLogin" /> <!-- authentication-success-handler-ref="customLoginSuccess"  -->
		<security:logout logout-url="/customLogout" invalidate-session="true" />
		
		<!-- 자동 로그인 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />	<!-- token-validity-seconds:쿠키의 유효시간 -->
		
		<!-- 로그아웃시 쿠키 삭제 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me, JSESSION_ID" />
		
	</security:http>
	
	<security:authentication-manager>
		
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- PreparedStatement에서 사용하는 구문 --><!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select userid, userpw, enabled from tbl_member where userid = ?" authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ?" /> -->
			
			<!-- bcryptPasswordEncoder로 변경 --><!-- <security:password-encoder ref="customPasswordEncoder" /> -->
			<security:password-encoder ref="bcryptPasswordEncoder" />
			
			<!--
			<security:user-service>
			 
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
				
			</security:user-service> 
			-->
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>
